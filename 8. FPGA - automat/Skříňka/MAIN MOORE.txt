library IEEE;
use IEEE.STD_LOGIC_1164.ALL;


entity automat2 is
    Port ( 
           clk : in  STD_LOGIC;
           rst : in  STD_LOGIC;
			  k1 : in  STD_LOGIC;
			  k2 : in  STD_LOGIC;
			  k5 : in  STD_LOGIC;
           vyst : out STD_LOGIC_VECTOR (1 downto 0); 	
           stavy : out STD_LOGIC_VECTOR (2 downto 0));	
end automat2;

architecture Behavioral of automat2 is
  signal state, next_state : STD_LOGIC_VECTOR (2 downto 0);
	
	constant s0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
	constant s1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
	constant s2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
	constant s3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
	constant s4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
  	constant s5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
	constant s6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
---------------------------------------------------------------------------------------
begin

   SYNC_PROC: process (clk)
   begin
		if rising_edge (clk) 
			then if (rst='0')
				  then state <= next_state; 
				 else state <= s0; 
			end if;
		end if;
   end process SYNC_PROC;
	
	
---------------------------------------------------------------------------------------
OUTPUT_DECODE: process(state)
begin
	case (state) is
		when S5 =>
			vyst <= "10";

		when S6 =>
			vyst <= "11";

		when others =>
			vyst <= "00";
	end case;
end process OUTPUT_DECODE;

---------------------------------------------------------------------------------------
STATE_DECODE: process (k1, k2, k5, state)
	begin
														
		case (state) is 
			when s0 => 
				if (k1 = '0' and k2 = '0' and k5 = '1') then						
						next_state <= s5;
						
				elsif	(k1 = '0' and k2 = '1' and k5 = '0') then
						next_state <= s2;
						
				elsif	(k1 = '1' and k2 = '0' and k5 = '0') then						
						next_state <= s1;	
						
					else
						next_state <= s0;
					end if;


			when s1 => 
				if (k1 = '0' and k2 = '0' and k5 = '1') then
						next_state <= s5;
						
				elsif	(k1 = '0' and k2 = '1' and k5 = '0') then
						next_state <= s3;
						
				elsif	(k1 = '1' and k2 = '0' and k5 = '0') then
						next_state <= s2;	
						
					else
						next_state <= s1;
					end if;
					
					
			when s2 => 
				if (k1 = '0' and k2 = '0' and k5 = '1') then
						next_state <= s5;
						
				elsif	(k1 = '0' and k2 = '1' and k5 = '0') then
						next_state <= s4;
						
				elsif	(k1 = '1' and k2 = '0' and k5 = '0') then
						next_state <= s3;	
					else
						next_state <= s2;
					end if;
					
					
			when s3 => 
				if (k1 = '0' and k2 = '0' and k5 = '1') then
						next_state <= s5;
						
				elsif	(k1 = '0' and k2 = '1' and k5 = '0') then
						next_state <= s5;
						
				elsif	(k1 = '1' and k2 = '0' and k5 = '0') then
						next_state <= s4;	
						
					else
						next_state <= s3;
					end if;
					
			when s4 => 
				if (k1 = '0' and k2 = '0' and k5 = '1') then
						next_state <= s5;
						
				elsif	(k1 = '0' and k2 = '1' and k5 = '0') then
						next_state <= s6;
						
				elsif	(k1 = '1' and k2 = '0' and k5 = '0') then
						next_state <= s5;	
						
					else
						next_state <= s4;
					end if;
					
			when s5 =>
						if(rst ='1') then
						next_state <= s0;

						else
						next_state <= s5;
						end if;
						
			when s6 =>
						if(rst ='1') then
						next_state <= s0;	
						
						else
						next_state <= s6;
						end if;
				
			when others => NULL;
		end case;

		end process STATE_DECODE;
 		
stavy <= state;
	
 end Behavioral;

